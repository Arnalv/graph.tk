
#ifdef GL_ES
precision highp float;
#endif
/*
attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;

void main(void) {
	vec3 donothing = aVertexNormal;
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
}
*/

attribute vec2 aVertexPosition;
attribute vec3 aVertexNormal;
attribute float aHeight;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform mat3 uNMatrix;

uniform vec3 uPointLightingLocation;

varying vec2 MCposition;
varying float diffuse;
varying float specular;

void main(void){
	vec3 uPointLightingColor = vec3(1.0,1.0,1.0);
	vec4 mvPosition = uMVMatrix * vec4(aVertexPosition, aHeight, 1.0);
	gl_Position = uPMatrix * mvPosition;
	vec3 lightLocation = vec3(uMVMatrix * vec4(uPointLightingLocation,1.0));
	vec3 lightDirection = normalize(lightLocation - mvPosition.xyz); // Note: the ray is traced backwards
	
	vec3 transformedNormal = normalize(uNMatrix * normalize(aVertexNormal));
	diffuse = max((dot(transformedNormal, lightDirection)), 0.0);
	float spec = 0.0;
	vec3 reflectVec = reflect(-lightDirection, transformedNormal);
	
	vec3 viewVec = normalize(-vec3(mvPosition));
	if (diffuse > 0.0) {
		spec = max(dot(reflectVec, viewVec), 0.0);
		spec = pow(spec, 16.0);
	}
	specular = spec;
	MCposition  = aVertexPosition.xy;
}