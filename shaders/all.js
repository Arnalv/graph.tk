


var shaders =  {"g-surface.fragment":"#ifdef GL_ES\nprecision highp float;\n#endif\n/*\nuniform vec4 uColor;\nvoid main(void) {\n\tgl_FragColor = uColor;\n}\n*/\n\n\nuniform vec4 uColor;\nvarying vec3 vLightWeighting;\n\nvoid main(void) {\n       gl_FragColor = vec4(uColor.rgb * vLightWeighting, uColor.a);\n}\n","g-surface.vertex":"\n#ifdef GL_ES\nprecision highp float;\n#endif\n/*\nattribute vec3 aVertexPosition;\nattribute vec3 aVertexNormal;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n\tvec3 donothing = aVertexNormal;\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}\n*/\n\nattribute vec3 aVertexPosition;\nattribute vec3 aVertexNormal;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat3 uNMatrix;\n\n\nvarying vec3 vLightWeighting;\n\n\nvoid main(void){\n\tvec3 uAmbientColor = vec3(0.4,0.4,0.4);\n\tvec3 uPointLightingColor = vec3(1.0,1.0,1.0);\n\tvec4 mvPosition = uMVMatrix * vec4(aVertexPosition, 1.0);\n\tgl_Position = uPMatrix * mvPosition;\n\tvec3 uPointLightingLocation = vec3(0.0,0.0,1.0);\n\tvec3 lightDirection = normalize(uPointLightingLocation - mvPosition.xyz);\n\n\tvec3 transformedNormal = uNMatrix * normalize(aVertexNormal);\n\tfloat directionalLightWeighting = max(abs(dot(transformedNormal, lightDirection)), 0.0);\n\tvLightWeighting = uAmbientColor + uPointLightingColor * directionalLightWeighting;\n\t\n}","shader-fs.fragment":"#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec4 uColor;\nvoid main(void) {\n\tgl_FragColor = uColor;\n}\n","shader-vs.vertex":"attribute vec3 aVertexPosition;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}\n"} ;


